{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "EBNF",
    "patterns": [
        {   "include": "#comment"   },
        {   "include": "#production"    },
        {   "include": "#testRule"  }
    ],
    
    "repository": {
        "comment": {
            "name":     "comment.block.ebnf",
            "begin":    "(?:(?<=(?:\\s|^)))\/\\*(?:(?=(?:\\s|$)))",
            "end":      "\\*\/",
            "beginCaptures":    {   "0": {  "name": "markup.punctuation.comment.begin.ebnf" }   },
            "endCaptures":      {   "0": {  "name": "markup.punctuation.comment.end.ebnf"   }   },
            "patterns": [
                {   "include": "#comment"   }
            ]
        },
        "production": {
            "name":     "internal.production.ebnf",
            "begin":    "^\\s*([:_a-zA-Z][-._0-9a-zA-Z]*)",
            "end":      "$^",
            "contentName":      "internal.production.content.ebnf",
            "beginCaptures":    {   "1": {  "name": "entity.name.declaration.ebnf"  }   },
            "patterns": [
                {   "include": "#choice"   }
            ]
        },
        "choice": {
            "name":     "internal.choice.ebnf",
            "begin":    "(::=)",
            "end":      "^$",
            "contentName":      "internal.choice.content.ebnf",
            "beginCaptures":    {   "1": {  "name": "keyword.operator.new.ebnf"  }   },
            "patterns": [
                {   "include": "#comment"   },
                {
                    "name": "internal.sequenceOrDifferenceSequence.ebnf",
                    "begin": "((?:[^|]|(?:(?<!\\s)\\|(?!\\s)))+)",
                    "end": "(\\|)\\s|^$",
                    "beginCaptures": {  "1": {  "patterns": [   {   "include": "#sequenceOrDifference"  }   ]   }
                    },
                    "endCaptures": { "1": {  "name": "keyword.operator.alternative.ebnf"  } }
                }
            ]
        },
        "sequenceOrDifference": {
            "name": "internal.sequenceOrDifference.ebnf",
            "patterns": [
                { "include": "#comment" },
                {
                    "name" : "internal.difference.ebnf",
                    "match": "(\\S+)\\s+(-)\\s+(\\S+)",
                    "captures": {
                        "1" : { "patterns": [ {"include": "#item"} ] },
                        "2" : {  "name": "keyword.operator.difference.ebnf"  },
                        "3" : { "patterns": [ {"include": "#item"} ] }
                    }
                },
                {
                    "name" : "internal.sequence.ebnf",
                    "match": "(\\S+)(?:\\G\\s+(\\S+))*",
                    "captures": {
                        "1" : { "patterns": [ {"include": "#item"} ] },
                        "2" : { "patterns": [ {"include": "#item"} ] }
                    }
                }
            ]
        },
        "item": {
            "name": "internal.item.ebnf",
            "match": "((?:[?+*](?![?+*]*(?:\\Z|$))|[^?*+])+)([?*+]*)",
            "captures": {
                "1" : { "patterns": [ { "include": "#primary" }] },
                "2" : { "name" : "keyword.operator.quantifier.ebnf" }
            }
        },
        "primary" :{
            "name": "primary.ebnf",
            "patterns": [
                { "include": "#comment" },
                { "include": "#stringLiteral" },
                { "include": "#entity" },
                { "include": "#charCode" },
                { "include": "#charClass" },
                { 
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#choice"
                        }
                    ]
                }
            ]
        },
        "entity" : {
            "name" : "entity.name.ebnf",
            "match": "[:_a-zA-Z][-._0-9a-zA-Z]*"
        },
        "charCode" :{
            "name" : "constant.character.code.ebnf",
            "match": "#x[0-9a-fA-F]+"
        },
        "charClass" :{
            "name": "constant.character.class.ebnf",
            "begin": "(\\[)(\\s*\\^)?",
            "end": "(\\])",
            "beginCaptures": {
                "1": {  "name": "keyword.operator.grouping.ebnf"    },
                "2": {  "name": "keyword.operator.negation.ebnf"    }
            },
            "endCaptures":      { "1": { "name": "keyword.operator.grouping.ebnf" }    },
            "patterns": [
                { "include": "#charCode" },
                { "include": "#char" },
                { "include": "#charRange" },
                { "include": "#charCodeRange" }
            ]
        },
        "char" :{
            "name" : "constant.character.ebnf",
            "match": "[\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\xFF]"
        },
        "charRange" :{
            "name" : "constant.character.range.ebnf",
            "match": "([\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\xFF])\\s*(-)\\s*([\\\\x09\\\\x0A\\\\x0D\\\\x20-\\\\x2C\\\\x2D-\\\\xFF])",
            "captures": {
                "1" : { "name":  "constant.character.ebnf" },
                "2" : { "name":  "keyword.operator.difference.ebnf" },
                "3" : { "name":  "constant.character.ebnf" }
            }
        },
        "charCodeRange" :{
            "name" : "constant.character.range.ebnf",
            "match": "(#x[0-9a-fA-F]+)\\s*(-)\\s*(#x[0-9a-fA-F]+)",
            "captures": {
                "1" : { "name":  "constant.character.code.ebnf" },
                "2" : { "name":  "keyword.operator.difference.ebnf" },
                "3" : { "name":  "constant.character.code.ebnf" }
            }
        },
        "stringLiteral" : {
            "name": "string.ebnf",
            "patterns": [
                { "include": "#stringQuotedDouble" },
                { "include": "#stringQuotedSingle" }
            ]
        },
        "stringQuotedDouble" : {
            "name" : "string.quoted.double.ebnf",
            "begin": "(?:(?<=(?:\\s|^)))\"",
            "end": "\"(?:(?=(?:\\s|$)))",
            "patterns": [
                {
                    "name": "constant.character.escape.ebnf",
                    "match": "\\\\."
                }
            ]
        },
        "stringQuotedSingle" : {
            "name" : "string.quoted.single.ebnf",
            "begin": "(?:(?<=(?:\\s|^)))'",
            "end": "'(?:(?=(?:\\s|$)))",
            "patterns": [
                {
                    "name": "constant.character.escape.ebnf",
                    "match": "\\\\."
                }
            ]
        },
        "testRule" : {
            "name" : "testRule.ebnf",
            "match": "[\\\\xF8-\\\\x{02FF}]+"
        }

    },
    "scopeName": "source.ebnf"
}